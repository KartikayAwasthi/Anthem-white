import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from "framer-motion";
import { ArrowLeft, Star, Zap, Volume2, Shield, ChevronDown, ChevronUp, ShoppingCart, Heart, X, ChevronLeft, ChevronRight, ZoomIn, Share2, Settings, Battery, Info } from "lucide-react";
import { useCart } from '../../contexts/CartContext';
import ColorChangeTransition from '../ColorChangeTransition';
import CartButton from '../CartButton';

// Custom styles
const styles = {
  '@keyframes float': {
    '0%': { transform: 'translateY(0px)' },
    '50%': { transform: 'translateY(-10px)' },
    '100%': { transform: 'translateY(0px)' }
  },
  '.animate-float': {
    animation: 'float 3s ease-in-out infinite'
  }
};

// Import eVAARA images
const evaaraImg1 = "/eVaara/fan1.png";
const evaaraImg2 = "/eVaara/fan2.png";
const evaaraImg3 = "/eVaara/fan3.png";
const evaaraImg4 = "/eVaara/fan4.png";
const evaaraImg5 = "/eVaara/fan5.png";

const evaaraCreatives = [
  "/evaara-creatives/1.jpg",
  "/evaara-creatives/2.jpg",
  "/evaara-creatives/3.jpg",
  "/evaara-creatives/4.jpg",
  "/evaara-creatives/5.jpg",
  "/evaara-creatives/6.png"
];

const evaaraData = {
  name: "eVAARA",
  image: evaaraImg1,
  motorTypes: {
    bldc: {
      name: "BLDC Motor",
      price: "₹3,699",
      description: "eVAARA offers exceptional value with reliable BLDC performance and modern aesthetics. The perfect choice for energy-conscious homes.",
      features: [
        "Powerfully efficient five star rated with ultra low energy consumption",
        "High speed with high Air Delivery",
        "Smooth noiseless operation",
        "Speed control on remote for 6 speed levels",
        "Boost mode for higher Air Delivery",
        "Easy installation",
        "Aero dynamic blades for strong air flow",
        "5 yrs warranty on motors",
        "2 yrs warranty on PCB",
        "Radio frequency (RF) remote for ease of operation from any corner of the room"
      ],
      specifications: {
        "Motor Type": "BLDC Standard",
        "Power Consumption": "25W",
        "Input Voltage": "230V AC, 50Hz",
        "Power": "25W",
        "Air Delivery": "220 CMM",
        "Speed": "280 RPM",
        "Sweep": "1200mm",
        "Warranty": "5 Years Motor, 2 Years PCB"
      }
    }
  },
  rating: 4.7,
  colors: [
    { 
      name: "Classic White", 
      image: evaaraImg1, 
      code: "#FFFFFF",
      folder: "cream",
      images3d: ["/fan 3d/Evaara/cream/1.png", "/fan 3d/Evaara/cream/2.png", "/fan 3d/Evaara/cream/3.png"]
    },
    { 
      name: "Pearl Bronze", 
      image: evaaraImg2, 
      code: "#CD7F32",
      folder: "brown-1",
      images3d: ["/fan 3d/Evaara/brown-1/1.png", "/fan 3d/Evaara/brown-1/2.png", "/fan 3d/Evaara/brown-1/3.png"]
    },
    { 
      name: "Matte Black", 
      image: evaaraImg3, 
      code: "#2F2F2F",
      folder: "Black",
      images3d: ["/fan 3d/Evaara/Black/1.png", "/fan 3d/Evaara/Black/2.png", "/fan 3d/Evaara/Black/3.png"]
    },
    { 
      name: "Brushed Silver", 
      image: evaaraImg4, 
      code: "#C0C0C0",
      folder: "Brown-2",
      images3d: ["/fan 3d/Evaara/Brown-2/1.png", "/fan 3d/Evaara/Brown-2/2.png", "/fan 3d/Evaara/Brown-2/3.png"]
    },
    { 
      name: "Antique Gold", 
      image: evaaraImg5, 
      code: "#D4AF37",
      folder: "Brown-3",
      images3d: ["/fan 3d/Evaara/Brown-3/1.png", "/fan 3d/Evaara/Brown-3/2.png", "/fan 3d/Evaara/Brown-3/3.png"]
    }
  ],
  itemDetails: {
    brandName: "Anthem by Emsquare Industries",
    modelName: "eVAARA",
    bldcComponents: [
      "Energy Efficient BLDC Motor Assembly",
      "Aerodynamic Fan Blades (3 pieces)",
      "Decorative LED Canopy",
      "RF Remote Control with 6 Speed Settings",
      "Premium Mounting Hardware Kit",
      "Installation Manual",
      "Warranty Card",
      "LED Light Module"
    ],
    inductionComponents: [
      // eVAARA is BLDC-only, but included for consistency
      "Standard Motor Assembly",
      "Aerodynamic Fan Blades (3 pieces)",
      "Standard Canopy",
      "Wall Switch Control",
      "Standard Mounting Hardware Kit",
      "Installation Manual",
      "Warranty Card"
    ],
    manufacturerAddress: {
      company: "Emsquare Industries",
      address: "Plot No. 72, GIDC, Bethora Industrial Estate, Bethora, Ponda, Goa-403409, India",
      phone: "+91 7400440127",
      email: "info@emsquareglobal.com",
      website: "www.anthemappliances.com"
    }
  }
};

const EvaaraFan = () => {
  const { addToCart } = useCart();
  const [selectedColor, setSelectedColor] = useState(evaaraData.colors[0]);
  const [current3dImageIndex, setCurrent3dImageIndex] = useState(0);
  
  // Initialize motor type based on available options
  const getDefaultMotorType = () => {
    const availableTypes = Object.keys(evaaraData.motorTypes);
    if (availableTypes.includes('bldc')) return 'bldc';
    if (availableTypes.includes('induction')) return 'induction';
    return availableTypes[0];
  };
  
  const [selectedMotorType, setSelectedMotorType] = useState(getDefaultMotorType());
  const [showColorTransition, setShowColorTransition] = useState(false);
  const [isSpecsOpen, setIsSpecsOpen] = useState(false);
  const [isFeaturesOpen, setIsFeaturesOpen] = useState(false);
  const [isItemDetailsOpen, setIsItemDetailsOpen] = useState(false);
  const [selectedImageIndex, setSelectedImageIndex] = useState(0);
  
  // Fullscreen image viewer states
  const [showFullscreen, setShowFullscreen] = useState(false);
  const [fullscreenImageIndex, setFullscreenImageIndex] = useState(0);

  // Get current motor data based on selection
  const getCurrentMotorData = () => {
    const currentMotor = evaaraData.motorTypes[selectedMotorType];
    if (currentMotor) return currentMotor;
    
    const availableTypes = Object.keys(evaaraData.motorTypes);
    return evaaraData.motorTypes[availableTypes[0]] || {};
  };

  // Get dynamic quick info based on motor type
  const getQuickInfo = () => {
    const currentMotor = getCurrentMotorData();
    const motorType = selectedMotorType;
    
    if (motorType === 'bldc') {
      return [
        { icon: Zap, label: "Energy Efficient", desc: `${currentMotor.specifications?.["Power Consumption"] || "25W"} Power` },
        { icon: Volume2, label: "Silent Operation", desc: `${currentMotor.specifications?.["Speed"] || "280"} RPM` },
        { icon: Shield, label: "Long Warranty", desc: currentMotor.specifications?.["Warranty"] || "5 Years Motor" }
      ];
    } else if (motorType === 'induction') {
      return [
        { icon: Zap, label: "High Performance", desc: "Powerful Motor" },
        { icon: Volume2, label: "Reliable", desc: "Durable Design" },
        { icon: Shield, label: "Warranty", desc: "2 Year Coverage" }
      ];
    } else {
      // Default info
      return [
        { icon: Zap, label: "Energy Efficient", desc: "Low Power" },
        { icon: Volume2, label: "Silent Operation", desc: "Quiet Performance" },
        { icon: Shield, label: "Warranty", desc: "Coverage Included" }
      ];
    }
  };

  // Get components based on selected motor type
  const getCurrentComponents = () => {
    if (selectedMotorType === 'bldc') {
      return evaaraData.itemDetails.bldcComponents;
    } else if (selectedMotorType === 'induction') {
      return evaaraData.itemDetails.inductionComponents;
    }
    // Default fallback (eVAARA only has BLDC)
    return evaaraData.itemDetails.bldcComponents || [];
  };

  // Handle motor type change
  const handleMotorTypeChange = (motorType) => {
    setSelectedMotorType(motorType);
  };

  // Handle add to cart
  const handleAddToCart = () => {
    const currentMotor = getCurrentMotorData();
    const cartItem = {
      id: `evaara-${selectedMotorType}`,
      name: `${evaaraData.name} (${currentMotor.name})`,
      price: currentMotor.price,
      image: getCurrent3dImage(),
      desc: currentMotor.description,
      color: selectedColor?.name || 'Default',
      motorType: currentMotor.name
    };
    addToCart(cartItem);
    
    alert(`${evaaraData.name} with ${currentMotor.name} added to cart!`);
  };

  // Handle share function
  const handleShare = async () => {
    const shareData = {
      title: `Anthem ${evaaraData.name}`,
      text: `Check out this amazing ${evaaraData.name} ceiling fan`,
      url: window.location.href
    };

    try {
      if (navigator.share && navigator.canShare(shareData)) {
        await navigator.share(shareData);
      } else {
        await navigator.clipboard.writeText(window.location.href);
        alert('Link copied to clipboard!');
      }
    } catch (error) {
      console.log('Error sharing:', error);
      try {
        await navigator.clipboard.writeText(window.location.href);
        alert('Link copied to clipboard!');
      } catch (clipboardError) {
        console.log('Clipboard error:', clipboardError);
      }
    }
  };

  const handleColorChange = (color) => {
    if (selectedColor?.name !== color.name) {
      setShowColorTransition(true);
      setTimeout(() => {
        setSelectedColor(color);
        // Reset 3D image index when changing color
        setCurrent3dImageIndex(0);
      }, 600);
    }
  };

  const getCurrentImage = () => {
    return selectedColor ? selectedColor.image : evaaraData.image;
  };

  // Get current 3D image
  const getCurrent3dImage = () => {
    if (!selectedColor || !selectedColor.images3d || selectedColor.images3d.length === 0) {
      return getCurrentImage();
    }
    return selectedColor.images3d[current3dImageIndex];
  };

  // Navigate to next 3D image
  const next3dImage = () => {
    if (!selectedColor?.images3d) return;
    setCurrent3dImageIndex((prev) => 
      (prev + 1) % selectedColor.images3d.length
    );
  };

  // Navigate to previous 3D image
  const prev3dImage = () => {
    if (!selectedColor?.images3d) return;
    setCurrent3dImageIndex((prev) => 
      (prev - 1 + selectedColor.images3d.length) % selectedColor.images3d.length
    );
  };

  // Fullscreen image viewer functions
  const openFullscreen = (imageIndex) => {
    setFullscreenImageIndex(imageIndex);
    setShowFullscreen(true);
    document.body.style.overflow = 'hidden';
  };

  const closeFullscreen = () => {
    setShowFullscreen(false);
    document.body.style.overflow = 'unset';
  };

  const nextImage = () => {
    const totalImages = evaaraCreatives.length;
    setFullscreenImageIndex((prev) => (prev + 1) % totalImages);
  };

  const prevImage = () => {
    const totalImages = evaaraCreatives.length;
    setFullscreenImageIndex((prev) => (prev - 1 + totalImages) % totalImages);
  };

  // Keyboard navigation
  useEffect(() => {
    const handleKeyPress = (e) => {
      if (showFullscreen) {
        if (e.key === 'ArrowRight') nextImage();
        if (e.key === 'ArrowLeft') prevImage();
        if (e.key === 'Escape') closeFullscreen();
      } else {
        // 3D image navigation with arrow keys when not in fullscreen
        if (e.key === 'ArrowRight') next3dImage();
        if (e.key === 'ArrowLeft') prev3dImage();
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [showFullscreen, selectedColor]);

  const currentMotor = getCurrentMotorData();

  if (!evaaraData) {
    return (
      <div className="bg-[#1c1c1c] text-white min-h-screen pt-24 pb-20 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-[#e49385] mb-4">Fan not found</h2>
          <p className="text-gray-400">The requested fan model could not be loaded.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-[#090909] text-white min-h-screen pt-24 pb-20">
      <div className="w-full">
        {/* Fullscreen Image Viewer */}
        <AnimatePresence>
          {showFullscreen && evaaraCreatives && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.3 }}
              className="fixed inset-0 z-[9999] flex items-center justify-center bg-black/90"
              onClick={closeFullscreen}
            >
              {/* Header controls */}
              <div className="absolute top-4 left-4 right-4 flex justify-between items-center z-20">
                <div className="bg-black/50 text-white text-sm px-4 py-2 rounded-full backdrop-blur-sm">
                  <span className="font-medium">{fullscreenImageIndex + 1} / {evaaraCreatives.length}</span>
                </div>
                <button
                  onClick={closeFullscreen}
                  className="bg-black/50 text-white p-3 hover:bg-red-600/50 rounded-full transition-all duration-200 backdrop-blur-sm"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>

              {/* Navigation arrows */}
              {evaaraCreatives.length > 1 && (
                <>
                  <button
                    onClick={(e) => { e.stopPropagation(); prevImage(); }}
                    className="absolute left-6 top-1/2 transform -translate-y-1/2 bg-black/50 text-white p-4 hover:bg-[#ba6a5a]/50 rounded-full transition-all duration-200 z-20 backdrop-blur-sm"
                  >
                    <ChevronLeft className="w-8 h-8" />
                  </button>
                  <button
                    onClick={(e) => { e.stopPropagation(); nextImage(); }}
                    className="absolute right-6 top-1/2 transform -translate-y-1/2 bg-black/50 text-white p-4 hover:bg-[#ba6a5a]/50 rounded-full transition-all duration-200 z-20 backdrop-blur-sm"
                  >
                    <ChevronRight className="w-8 h-8" />
                  </button>
                </>
              )}

              {/* Image */}
              <motion.div
                className="relative flex items-center justify-center w-full h-full p-8"
                onClick={(e) => e.stopPropagation()}
              >
                <motion.div
                  className="relative flex items-center justify-center rounded-lg shadow-2xl"
                >
                  <motion.img
                    key={fullscreenImageIndex}
                    src={evaaraCreatives[fullscreenImageIndex]}
                    alt={`Creative ${fullscreenImageIndex + 1}`}
                    className="select-none rounded-lg max-w-[80vw] max-h-[80vh] object-contain"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    transition={{ duration: 0.3 }}
                    draggable={false}
                  />
                </motion.div>
              </motion.div>

              {/* Bottom instructions */}
              <div className="absolute bottom-6 left-1/2 transform -translate-x-1/2 text-white/80 text-sm text-center z-20">
                <div className="bg-black/50 rounded-xl px-6 py-3 backdrop-blur-sm">
                  <div className="flex items-center justify-center space-x-6 text-xs">
                    <span className="flex items-center space-x-1">
                      <span className="text-[#e49385]">←→</span>
                      <span>Navigate</span>
                    </span>
                    <span className="flex items-center space-x-1">
                      <span className="text-[#e49385]">ESC</span>
                      <span>Close</span>
                    </span>
                  </div>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        <div className="flex flex-col lg:flex-row h-[calc(100vh-120px)]">
          {/* Left Column - Images (60%) */}
          <motion.div
            initial={{ opacity: 0, x: -50 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6 }}
            className="lg:w-[60%] lg:sticky lg:top-24 lg:h-full overflow-hidden"
          >
            {/* Main Image with Glassmorphism Effect */}
            <div className="relative bg-black h-full flex items-center justify-center p-0">
              {/* Glassmorphism circles/blobs in background */}
              <div className="absolute top-1/4 left-1/4 w-40 h-40 rounded-full bg-[#ba6a5a]/20 filter blur-3xl"></div>
              <div className="absolute bottom-1/4 right-1/3 w-60 h-60 rounded-full bg-[#e49385]/10 filter blur-3xl"></div>
              <div className="absolute top-1/2 left-1/3 w-32 h-32 rounded-full bg-white/5 filter blur-2xl"></div>
              
              {/* Remote image at bottom right (shifted left) */}
<div className="absolute bottom-4 right-20 z-20 w-12 md:w-16 lg:w-20">
  <img 
    src="/remote.png" 
    alt="Fan Remote" 
    className="w-full h-auto object-contain drop-shadow-lg animate-float"
  />
</div>

              
              {/* Glassmorphism container for the fan - Full size */}
              <div className="relative z-10 bg-white/10 backdrop-blur-md rounded-none lg:rounded-r-3xl border-r border-white/20 shadow-xl w-full h-full flex items-center justify-center">
                <motion.img
                  key={`${selectedColor?.name}-${current3dImageIndex}`}
                  src={getCurrent3dImage()}
                  alt={`${evaaraData.name} ${selectedColor?.name} View ${current3dImageIndex + 1}`}
                  className="w-full h-full object-contain transition-all duration-500 scale-110 max-h-[calc(100vh-120px)]"
                  initial={{ opacity: 0.8, x: -10 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.3 }}
                  drag="x"
                  dragConstraints={{ left: 0, right: 0 }}
                  dragElastic={0.2}
                  onDragEnd={(e, { offset, velocity }) => {
                    const swipe = offset.x;
                    if (swipe < -50) {
                      next3dImage();
                    } else if (swipe > 50) {
                      prev3dImage();
                    }
                  }}
                />
              </div>
              
              {/* Navigation controls for 3D images */}
              {selectedColor?.images3d && selectedColor.images3d.length > 1 && (
                <>
                  <button
                    onClick={prev3dImage}
                    className="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/10 text-white p-3 hover:bg-[#ba6a5a]/50 rounded-full transition-all duration-300 backdrop-blur-md z-20"
                  >
                    <ChevronLeft className="w-6 h-6" />
                  </button>
                  <button
                    onClick={next3dImage}
                    className="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/10 text-white p-3 hover:bg-[#ba6a5a]/50 rounded-full transition-all duration-300 backdrop-blur-md z-20"
                  >
                    <ChevronRight className="w-6 h-6" />
                  </button>                  {/* Image pagination indicator */}
                  <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black/30 backdrop-blur-sm text-white text-sm px-4 py-2 rounded-full z-20">
                    <span className="font-medium">{current3dImageIndex + 1} / {selectedColor.images3d.length}</span>
                  </div>
                </>
              )}
              
              {/* Floating Action Buttons */}
              <div className="absolute top-4 right-4 flex flex-col gap-2 z-20">
                <button 
                  onClick={handleShare}
                  className="p-3 bg-white/10 backdrop-blur-md rounded-full hover:bg-white/20 transition-colors group"
                  title="Share this fan"
                >
                  <Share2 className="w-5 h-5 group-hover:scale-110 transition-transform" />
                </button>
                <button className="p-3 bg-white/10 backdrop-blur-md rounded-full hover:bg-white/20 transition-colors">
                  <Heart className="w-5 h-5" />
                </button>
              </div>
              
              {/* Localized Color Change Animation */}
              <div className="absolute inset-0 z-10 pointer-events-none">
                <ColorChangeTransition 
                  isVisible={showColorTransition} 
                  onComplete={() => setShowColorTransition(false)}
                  type="fan"
                  localized={true}
                />
              </div>
            </div>
          </motion.div>

          {/* Right Column - Details (40%) */}
          <motion.div
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            className="lg:w-[40%] p-6 bg-[#111]/80 flex flex-col h-[calc(100vh-120px)]"
          >
            {/* Top fixed content */}
            <div className="flex-shrink-0 space-y-6 mb-6">
              {/* Product Title & Rating */}
              <div>
                <h1 className="text-4xl font-bold text-white mb-2">
                  {evaaraData.name}
                </h1>
                <div className="flex items-center gap-4 mb-4">
                  <div className="flex items-center gap-1">
                    {[...Array(5)].map((_, i) => (
                      <Star
                        key={i}
                        className={`w-5 h-5 ${
                          i < Math.floor(evaaraData.rating)
                            ? "text-yellow-400 fill-current"
                            : "text-gray-400"
                        }`}
                      />
                    ))}
                    <span className="text-gray-300 ml-2">({evaaraData.rating})</span>
                  </div>
                  <span className="text-green-400 text-sm">In Stock</span>
                  <span className="bg-[#ba6a5a] text-white px-3 py-1 rounded-full text-sm">
                    {getCurrentMotorData().name}
                  </span>
                </div>
                <p className="text-gray-300 text-lg leading-relaxed">
                  {getCurrentMotorData().description}
                </p>
              </div>

              {/* Price */}
              <div className="bg-white/5 backdrop-blur-md rounded-xl p-6 border border-white/10">
                <div className="flex items-center justify-between">
                  <div>
                    <span className="text-3xl font-bold text-[#ba6a5a]">{getCurrentMotorData().price}</span>
                    <span className="text-gray-400 line-through ml-3">₹{parseInt(getCurrentMotorData().price?.replace('₹', '') || '0') + 1000}</span>
                  </div>
                  <span className="bg-green-500/80 backdrop-blur-sm text-white px-3 py-1 rounded-full text-sm">
                    Save ₹1000
                  </span>
                </div>
              </div>
            </div>
            
            {/* Scrollable content */}
            <div className="overflow-y-auto flex-grow space-y-6 pr-2">
              {/* Color Variants - Moved inside scrollable area */}
              {evaaraData.colors && evaaraData.colors.length > 0 && (
                <div className="mt-0">
                  <h3 className="text-lg font-semibold text-[#e49385] mb-3">Available Colors</h3>
                  <div className="flex flex-wrap gap-2">
                    {evaaraData.colors.map((color, index) => (
                      <motion.div
                        key={index}
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        className={`cursor-pointer p-2 rounded-lg border transition-all duration-300 backdrop-blur-md ${
                          selectedColor?.name === color.name
                            ? "border-[#ba6a5a] bg-[#ba6a5a]/20"
                            : "border-white/10 hover:border-[#e49385] bg-white/5"
                        }`}
                        onClick={() => handleColorChange(color)}
                      >
                        <img
                          src={color.images3d && color.images3d.length > 0 ? color.images3d[0] : color.image}
                          alt={color.name}
                          className="w-12 h-12 object-contain rounded"
                        />
                        <p className="text-xs text-center mt-1 text-gray-300">{color.name}</p>
                      </motion.div>
                    ))}
                  </div>
                </div>
              )}

              {/* Motor Type Selection Buttons */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-[#e49385]">Motor Type</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  {Object.entries(evaaraData.motorTypes).map(([key, motorData]) => (
                    <motion.button
                      key={key}
                      whileHover={{ scale: 1.03 }}
                      whileTap={{ scale: 0.97 }}
                      className={`p-4 rounded-xl border backdrop-blur-md transition-all duration-300 flex flex-col items-start gap-1 ${
                        selectedMotorType === key
                          ? "border-[#ba6a5a] bg-[#ba6a5a]/20"
                          : "border-white/10 hover:border-[#e49385] bg-white/5"
                      }`}
                      onClick={() => handleMotorTypeChange(key)}
                    >
                      <div className="flex justify-between items-center w-full">
                        <span className="font-semibold text-white">{motorData.name}</span>
                        <span className="text-[#e49385] font-semibold">{motorData.price}</span>
                      </div>
                      <span className="text-xs text-gray-400 line-through">
                        ₹{parseInt(motorData.price?.replace('₹', '') || '0') + 1000}
                      </span>
                    </motion.button>
                  ))}
                </div>
              </div>
              
              {/* Buy Button */}
              <div className="flex gap-3 mt-6">
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className="flex-1 flex items-center justify-center gap-2 bg-white/10 hover:bg-white/20 text-white px-6 py-3 rounded-xl border border-white/10 backdrop-blur-md transition-all duration-300"
                  onClick={() => alert('Added to wishlist!')}
                >
                  <Heart className="w-5 h-5" />
                  <span>Wishlist</span>
                </motion.button>
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className="flex-1 flex items-center justify-center gap-2 bg-gradient-to-r from-[#ba6a5a] to-[#e49385] text-white px-6 py-3 rounded-xl shadow-lg transition-all duration-300"
                  onClick={handleAddToCart}
                >
                  <ShoppingCart className="w-5 h-5" />
                  <span>Buy Now</span>
                </motion.button>
              </div>

              {/* Quick Info Icons */}
              <div className="grid grid-cols-3 gap-4">
                {getQuickInfo().map((info, index) => (
                  <div key={index} className="text-center p-4 bg-white/5 backdrop-blur-md rounded-xl border border-white/10">
                    <info.icon className="w-8 h-8 text-[#ba6a5a] mx-auto mb-2" />
                    <p className="text-sm text-gray-300">{info.label}</p>
                    <p className="text-xs text-gray-500 mt-1">{info.desc}</p>
                  </div>
                ))}
              </div>

              {/* Technical Specifications - Inside scrollable area */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.4 }}
                className="bg-white/5 backdrop-blur-md rounded-xl p-6 border border-white/10"
              >
                <div
                  className="flex justify-between items-center cursor-pointer"
                  onClick={() => setIsSpecsOpen(!isSpecsOpen)}
                >
                  <h3 className="text-2xl font-semibold text-[#e49385]">Technical Specifications</h3>
                  <motion.div
                    animate={{ rotate: isSpecsOpen ? 180 : 0 }}
                    transition={{ duration: 0.3 }}
                    className="text-[#e49385]"
                  >
                    {isSpecsOpen ? <ChevronUp size={24} /> : <ChevronDown size={24} />}
                  </motion.div>
                </div>
                <motion.div
                  initial={false}
                  animate={{ height: isSpecsOpen ? "auto" : 0, opacity: isSpecsOpen ? 1 : 0 }}
                  transition={{ duration: 0.3 }}
                  className="overflow-hidden"
                >
                  <div className="pt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
                    {Object.entries(getCurrentMotorData().specifications || {}).map(([key, value], index) => (
                      <motion.div
                        key={key}
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: isSpecsOpen ? 1 : 0, y: isSpecsOpen ? 0 : 10 }}
                        transition={{ duration: 0.3, delay: isSpecsOpen ? index * 0.05 : 0 }}
                        className="flex justify-between items-center border-b border-[#444] pb-3"
                      >
                        <span className="text-gray-400 text-sm">{key}</span>
                        <span className="text-white font-medium text-sm text-right">{value}</span>
                      </motion.div>
                    ))}
                  </div>
                </motion.div>
              </motion.div>

              {/* Item Details - Inside scrollable area */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.4 }}
                className="bg-white/5 backdrop-blur-md rounded-xl p-6 border border-white/10"
              >
                <div
                  className="flex items-center justify-between cursor-pointer hover:bg-white/10 rounded-lg transition-colors duration-300 p-2 -m-2"
                  onClick={() => setIsItemDetailsOpen(!isItemDetailsOpen)}
                >
                  <h3 className="text-2xl font-semibold text-[#e49385]">Item Details</h3>
                  <motion.div
                    animate={{ rotate: isItemDetailsOpen ? 180 : 0 }}
                    transition={{ duration: 0.3 }}
                    className="text-[#e49385]"
                  >
                    {isItemDetailsOpen ? <ChevronUp size={24} /> : <ChevronDown size={24} />}
                  </motion.div>
                </div>
                <motion.div
                  initial={false}
                  animate={{ height: isItemDetailsOpen ? "auto" : 0, opacity: isItemDetailsOpen ? 1 : 0 }}
                  transition={{ duration: 0.3 }}
                  className="overflow-hidden"
                >
                  <div className="pt-6 space-y-6">
                    {/* Brand and Model */}
                    <div>
                      <h4 className="text-lg font-semibold text-[#e49385] mb-3">Product Information</h4>
                      <div className="grid grid-cols-1 gap-3">
                        <div className="flex justify-between items-center border-b border-[#444] pb-3">
                          <span className="text-gray-400 text-sm">Brand Name</span>
                          <span className="text-white font-medium text-sm text-right">{evaaraData.itemDetails.brandName}</span>
                        </div>
                        <div className="flex justify-between items-center border-b border-[#444] pb-3">
                          <span className="text-gray-400 text-sm">Model Name</span>
                          <span className="text-white font-medium text-sm text-right">{evaaraData.itemDetails.modelName}</span>
                        </div>
                      </div>
                    </div>

                    {/* Components */}
                    <div>
                      <h4 className="text-lg font-semibold text-[#e49385] mb-3">Included Components</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                        {getCurrentComponents().map((component, index) => (
                          <motion.div
                            key={index}
                            initial={{ opacity: 0, y: 10 }}
                            animate={{ opacity: isItemDetailsOpen ? 1 : 0, y: isItemDetailsOpen ? 0 : 10 }}
                            transition={{ duration: 0.3, delay: isItemDetailsOpen ? index * 0.05 : 0 }}
                            className="flex items-center gap-3"
                          >
                            <div className="w-2 h-2 bg-[#ba6a5a] rounded-full flex-shrink-0"></div>
                            <span className="text-gray-200 text-sm">{component}</span>
                          </motion.div>
                        ))}
                      </div>
                    </div>

                    {/* Manufacturer Details */}
                    <div>
                      <h4 className="text-lg font-semibold text-[#e49385] mb-3">Manufacturer Details</h4>
                      <div className="grid grid-cols-1 gap-3">
                        <div className="flex justify-between items-start border-b border-[#444] pb-3">
                          <span className="text-gray-400 text-sm">Company</span>
                          <span className="text-white font-medium text-sm text-right">{evaaraData.itemDetails.manufacturerAddress.company}</span>
                        </div>
                        <div className="flex justify-between items-start border-b border-[#444] pb-3">
                          <span className="text-gray-400 text-sm">Address</span>
                          <span className="text-white font-medium text-sm text-right max-w-xs">{evaaraData.itemDetails.manufacturerAddress.address}</span>
                        </div>
                        <div className="flex justify-between items-center border-b border-[#444] pb-3">
                          <span className="text-gray-400 text-sm">Phone</span>
                          <span className="text-white font-medium text-sm text-right">{evaaraData.itemDetails.manufacturerAddress.phone}</span>
                        </div>
                        <div className="flex justify-between items-center border-b border-[#444] pb-3">
                          <span className="text-gray-400 text-sm">Email</span>
                          <span className="text-white font-medium text-sm text-right">{evaaraData.itemDetails.manufacturerAddress.email}</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-gray-400 text-sm">Website</span>
                          <span className="text-white font-medium text-sm text-right">{evaaraData.itemDetails.manufacturerAddress.website}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </motion.div>
              </motion.div>
                    <motion.div
                      key={index}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      className={`cursor-pointer p-2 rounded-lg border transition-all duration-300 backdrop-blur-md ${
                        selectedColor?.name === color.name
                          ? "border-[#ba6a5a] bg-[#ba6a5a]/20"
                          : "border-white/10 hover:border-[#e49385] bg-white/5"
                      }`}
                      onClick={() => handleColorChange(color)}
                    >
                      <img
                        src={color.images3d && color.images3d.length > 0 ? color.images3d[0] : color.image}
                        alt={color.name}
                        className="w-14 h-14 object-contain"
                      />
                      <p className="text-xs text-center mt-1">{color.name}</p>
                    </motion.div>
                  ))}
                </div>
              </div>
            )}

            {/* Motor Type Selection Buttons */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-[#e49385]">Motor Type</h3>
              <div className="grid grid-cols-1 gap-3">
                {Object.entries(evaaraData.motorTypes).map(([motorKey, motorData]) => (
                  <motion.button
                    key={motorKey}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    className={`p-4 rounded-xl border transition-all duration-300 text-left backdrop-blur-md ${
                      selectedMotorType === motorKey
                        ? "border-[#ba6a5a] bg-[#ba6a5a]/20"
                        : "border-white/10 hover:border-[#e49385] bg-white/5"
                    }`}
                    onClick={() => handleMotorTypeChange(motorKey)}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        {motorKey === 'bldc' ? (
                          <Battery className={`w-6 h-6 ${selectedMotorType === motorKey ? 'text-[#ba6a5a]' : 'text-gray-400'}`} />
                        ) : (
                          <Settings className={`w-6 h-6 ${selectedMotorType === motorKey ? 'text-[#ba6a5a]' : 'text-gray-400'}`} />
                        )}
                        <div>
                          <h4 className="font-semibold text-white">{motorData.name}</h4>
                          <p className="text-sm text-gray-300">{motorData.price}</p>
                        </div>
                      </div>
                      {selectedMotorType === motorKey && (
                        <div className="w-4 h-4 bg-[#ba6a5a] rounded-full flex items-center justify-center">
                          <div className="w-2 h-2 bg-white rounded-full"></div>
                        </div>
                      )}
                    </div>
                    <p className="text-sm text-gray-400 mt-2">{motorData.description}</p>
                  </motion.button>
                ))}
              </div>
            </div>

            {/* Action Buttons */}
            <div className="flex gap-4">
              <div className="flex-1">
                <CartButton 
                  product={{
                    id: `evaara-${selectedMotorType}`,
                    name: `${evaaraData.name} (${getCurrentMotorData().name})`,
                    price: getCurrentMotorData().price,
                    image: getCurrent3dImage(),
                    desc: getCurrentMotorData().description,
                    color: selectedColor?.name || 'Default',
                    motorType: getCurrentMotorData().name
                  }}
                  className="py-4 px-6"
                />
              </div>
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className="bg-white/5 backdrop-blur-md text-white py-4 px-6 rounded-xl font-semibold border border-[#ba6a5a] hover:bg-[#ba6a5a]/20 transition-all duration-300"
              >
                Buy Now
              </motion.button>
            </div>

            {/* Quick Info Icons */}
            <div className="grid grid-cols-3 gap-4">
              {getQuickInfo().map((info, index) => (
                <div key={index} className="text-center p-4 bg-white/5 backdrop-blur-md rounded-xl border border-white/10">
                  <info.icon className="w-8 h-8 text-[#ba6a5a] mx-auto mb-2" />
                  <p className="text-sm text-gray-300">{info.label}</p>
                  <p className="text-xs text-gray-500 mt-1">{info.desc}</p>
                </div>
              ))}
            </div>
          </motion.div>
        </div>

        {/* Creatives Section */}
        {evaaraCreatives && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.5 }}
            className="mt-6"
          >
            <h3 className="text-2xl font-semibold text-[#e49385] mb-6">
              Creative Highlights
            </h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
              {evaaraCreatives.map((img, index) => (
                <motion.div
                  key={index}
                  className="relative rounded-xl overflow-hidden shadow-lg bg-white/5 backdrop-blur-md hover:scale-[1.02] transition-all duration-300 cursor-pointer group border border-white/10"
                  onClick={() => openFullscreen(index)}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  {/* Image */}
                  <div className="relative overflow-hidden rounded-xl">
                    <img
                      src={img}
                      alt={`Creative ${index + 1}`}
                      className="w-full h-64 object-cover transition-all duration-300 group-hover:scale-105"
                    />
                  </div>
                  
                  {/* Overlay with zoom icon */}
                  <div className="absolute inset-0 bg-black/0 group-hover:bg-black/30 transition-all duration-300 flex items-center justify-center rounded-xl">
                    <div className="opacity-0 group-hover:opacity-100 transition-all duration-300 bg-white/20 backdrop-blur-sm rounded-full p-3">
                      <ZoomIn className="w-6 h-6 text-white" />
                    </div>
                  </div>
                  
                  {/* Index badge */}
                  <div className="absolute top-3 right-3 bg-black/70 text-white text-xs px-3 py-1.5 rounded-full backdrop-blur-sm">
                    <span className="font-medium">{index + 1}</span>
                  </div>
                </motion.div>
              ))}
            </div>
          </motion.div>
        )}
      </div>
    </div>
  );
};

export default EvaaraFan;
